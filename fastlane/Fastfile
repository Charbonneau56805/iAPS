# This file contains the fastlane.tools configuration
# Docs: https://docs.fastlane.tools
# Actions: https://docs.fastlane.tools/actions
# Plugins: https://docs.fastlane.tools/plugins/available-plugins

default_platform(:ios)

# --------
# ENV / constants
# --------
TEAMID                    = ENV["TEAMID"]
GH_PAT                    = ENV["GH_PAT"]
GITHUB_WORKSPACE          = ENV["GITHUB_WORKSPACE"]
GITHUB_REPOSITORY_OWNER   = ENV["GITHUB_REPOSITORY_OWNER"]
FASTLANE_KEY_ID           = ENV["FASTLANE_KEY_ID"]
FASTLANE_ISSUER_ID        = ENV["FASTLANE_ISSUER_ID"]
FASTLANE_KEY              = ENV["FASTLANE_KEY"]
DEVICE_NAME               = ENV["DEVICE_NAME"]
DEVICE_ID                 = ENV["DEVICE_ID"]
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

# Fallback bundle id if APP_IDENTIFIER isn’t provided by the workflow
APP_IDENTIFIER = ENV.fetch("APP_IDENTIFIER") { "ru.artpancreas.#{TEAMID}.FreeAPS" }

# --------
# Optional: write overrides into ConfigOverride.xcconfig so Xcode picks them up
# --------
if ENV["BUILD_GROUP"]
  File.write("../ConfigOverride.xcconfig", "COPYRIGHT_NOTICE = #{ENV['BUILD_GROUP']}\n", mode: "a")
end

if APP_IDENTIFIER != "ru.artpancreas.#{TEAMID}.FreeAPS"
  File.write("../ConfigOverride.xcconfig", "BUNDLE_IDENTIFIER = #{APP_IDENTIFIER}\n", mode: "a")
end

if File.exist?("../ConfigOverride.xcconfig")
  contents = File.read("../ConfigOverride.xcconfig")
  puts "=== File Contents: ../ConfigOverride.xcconfig ==="
  puts contents
  puts "====================="
end

# Helper: return all bundle IDs used by the project (main + extensions)
def all_app_ids(base_id)
  [
    base_id,                                   # main app
    "#{base_id}.LiveActivity",                  # Live Activity extension
    "#{base_id}.watchkitapp",                   # Watch app
    "#{base_id}.watchkitapp.watchkitextension"  # WatchKit extension
  ]
end

platform :ios do
  desc "Build iAPS"
  lane :build_iAPS do
    setup_ci if ENV["CI"]

    update_project_team(
      path: "#{GITHUB_WORKSPACE}/FreeAPS.xcodeproj",
      teamid: TEAMID
    )

    api_key = app_store_connect_api_key(
      key_id:     FASTLANE_KEY_ID,
      issuer_id:  FASTLANE_ISSUER_ID,
      key_content: FASTLANE_KEY
    )

    # Ensure signing assets exist / are refreshed (creates if missing/expired)
    id_base = APP_IDENTIFIER
    app_ids = all_app_ids(id_base)

    match(
      type: "appstore",
      readonly: false,
      force: true,
      force_for_new_certificates: true,
      app_identifier: app_ids,
      git_basic_authorization: Base64.strict_encode64("#{GITHUB_REPOSITORY_OWNER}:#{GH_PAT}")
    )

    # Bump build number relative to latest TestFlight
    previous_build_number = latest_testflight_build_number(
      app_identifier: id_base,
      api_key: api_key
    )
    current_build_number = previous_build_number + 1

    increment_build_number(
      xcodeproj: "#{GITHUB_WORKSPACE}/FreeAPS.xcodeproj",
      build_number: current_build_number
    )

    # Map provisioning profiles to targets
    mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]

    update_code_signing_settings(
      path: "#{GITHUB_WORKSPACE}/FreeAPS.xcodeproj",
      profile_name: mapping[id_base],
      code_sign_identity: "iPhone Distribution",
      targets: ["FreeAPS"]
    )
    update_code_signing_settings(
      path: "#{GITHUB_WORKSPACE}/FreeAPS.xcodeproj",
      profile_name: mapping["#{id_base}.watchkitapp.watchkitextension"],
      code_sign_identity: "iPhone Distribution",
      targets: ["FreeAPSWatch WatchKit Extension"]
    )
    update_code_signing_settings(
      path: "#{GITHUB_WORKSPACE}/FreeAPS.xcodeproj",
      profile_name: mapping["#{id_base}.watchkitapp"],
      code_sign_identity: "iPhone Distribution",
      targets: ["FreeAPSWatch"]
    )
    update_code_signing_settings(
      path: "#{GITHUB_WORKSPACE}/FreeAPS.xcodeproj",
      profile_name: mapping["#{id_base}.LiveActivity"],
      code_sign_identity: "iPhone Distribution",
      targets: ["LiveActivityExtension"]
    )

    gym(
      export_method: "app-store",
      scheme: "FreeAPS X",
      output_name: "iAPS.ipa",
      configuration: "Release",
      destination: "generic/platform=iOS",
      buildlog_path: "buildlog"
    )

    copy_artifacts(
      target_path: "artifacts",
      artifacts: ["*.mobileprovision", "*.ipa", "*.dSYM.zip"]
    )
  end

  desc "Push to TestFlight"
  lane :release do
    api_key = app_store_connect_api_key(
      key_id:     FASTLANE_KEY_ID,
      issuer_id:  FASTLANE_ISSUER_ID,
      key_content: FASTLANE_KEY
    )

    upload_to_testflight(
      api_key: api_key,
      skip_submission: false,
      ipa: "iAPS.ipa",
      skip_waiting_for_build_processing: true,
      changelog: "#{git_branch} #{last_git_commit[:abbreviated_commit_hash]}"
    )
  end

  desc "Provision Identifiers and Certificates"
  lane :identifiers do
    setup_ci if ENV["CI"]
    ENV["MATCH_READONLY"] = "false"

    app_store_connect_api_key(
      key_id:     FASTLANE_KEY_ID,
      issuer_id:  FASTLANE_ISSUER_ID,
      key_content: FASTLANE_KEY
    )

    def configure_bundle_id(name, identifier, capabilities)
      bundle_id = Spaceship::ConnectAPI::BundleId.find(identifier) || Spaceship::ConnectAPI::BundleId.create(
        name:       name,
        identifier: identifier,
        platform:   "IOS"
      )
      existing = bundle_id.get_capabilities.map(&:capability_type)
      (capabilities - existing).each { |cap| bundle_id.create_capability(cap) }
    end

    configure_bundle_id("FreeAPS", APP_IDENTIFIER, [
      Spaceship::ConnectAPI::BundleIdCapability::Type::APP_GROUPS,
      Spaceship::ConnectAPI::BundleIdCapability::Type::HEALTHKIT,
      Spaceship::ConnectAPI::BundleIdCapability::Type::NFC_TAG_READING
    ])

    configure_bundle_id("FreeAPSWatch WatchKit Extension", "#{APP_IDENTIFIER}.watchkitapp.watchkitextension", [
      Spaceship::ConnectAPI::BundleIdCapability::Type::APP_GROUPS,
      Spaceship::ConnectAPI::BundleIdCapability::Type::HEALTHKIT
    ])

    configure_bundle_id("FreeAPSWatch", "#{APP_IDENTIFIER}.watchkitapp", [
      Spaceship::ConnectAPI::BundleIdCapability::Type::APP_GROUPS
    ])

    configure_bundle_id("LiveActivityExtension", "#{APP_IDENTIFIER}.LiveActivity", [
      Spaceship::ConnectAPI::BundleIdCapability::Type::APP_GROUPS
    ])
  end

  desc "Provision Certificates"
  lane :certs do
    setup_ci if ENV["CI"]
    ENV["MATCH_READONLY"] = "false"

    app_store_connect_api_key(
      key_id:     FASTLANE_KEY_ID,
      issuer_id:  FASTLANE_ISSUER_ID,
      key_content: FASTLANE_KEY
    )

    id_base = APP_IDENTIFIER
    app_ids = all_app_ids(id_base)

    match(
      type: "appstore",
      force: true,
      readonly: false,
      app_identifier: app_ids,
      git_basic_authorization: Base64.strict_encode64("#{GITHUB_REPOSITORY_OWNER}:#{GH_PAT}")
    )
  end

  desc "Validate Secrets"
  lane :validate_secrets do
    setup_ci if ENV["CI"]
    # READONLY on, but we still pass explicit app_identifiers so fastlane won’t error
    ENV["MATCH_READONLY"] = "true"

    app_store_connect_api_key(
      key_id:     FASTLANE_KEY_ID,
      issuer_id:  FASTLANE_ISSUER_ID,
      key_content: FASTLANE_KEY
    )

    def find_bundle_id(identifier)
      Spaceship::ConnectAPI::BundleId.find(identifier)
    end

    id_base = APP_IDENTIFIER
    app_ids = all_app_ids(id_base)

    find_bundle_id(id_base)

    match(
      type: "appstore",
      readonly: true,
      app_identifier: app_ids,
      git_basic_authorization: Base64.strict_encode64("#{GITHUB_REPOSITORY_OWNER}:#{GH_PAT}")
    )
  end

  desc "Nuke Certs"
  lane :nuke_certs do
    setup_ci if ENV["CI"]
    ENV["MATCH_READONLY"] = "false"

    app_store_connect_api_key(
      key_id:     FASTLANE_KEY_ID,
      issuer_id:  FASTLANE_ISSUER_ID,
      key_content: FASTLANE_KEY
    )

    match_nuke(
      type: "appstore",
      team_id: TEAMID,
      skip_confirmation: true,
      git_basic_authorization: Base64.strict_encode64("#{GITHUB_REPOSITORY_OWNER}:#{GH_PAT}")
    )
  end
end
