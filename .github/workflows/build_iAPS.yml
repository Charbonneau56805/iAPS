name: Build iAPS
run-name: Build iAPS (${{ github.ref_name }})

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
      - master
      - alive

env:
  UPSTREAM_REPO: Artificial-Pancreas/iAPS
  UPSTREAM_BRANCH: ${{ github.ref_name }}
  TARGET_BRANCH: ${{ github.ref_name }}
  ALIVE_BRANCH: alive
  TEAMID: ${{ secrets.TEAMID }}
  FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
  FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
  FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  GH_PAT: ${{ secrets.GH_PAT }}
  CERT_PROFILE_BASE64: ${{ secrets.CERT_PROFILE_BASE64 }}

jobs:
  auto_build_check:
    name: Check Auto Build Status
    runs-on: ubuntu-latest
    outputs:
      AUTO_BUILD_ENABLED: ${{ steps.auto_build_enabled.outputs.auto_build }}
    steps:
      - name: Is Auto Build Branch
        id: auto_build_enabled
        shell: bash
        run: |
          set -euo pipefail
          echo "auto_build=false" >> "$GITHUB_OUTPUT"

          # If repo var AUTO_BUILD_BRANCHES exists and contains the current branch, enable auto build
          LIST="${{ vars.AUTO_BUILD_BRANCHES }}"
          if [[ -n "$LIST" ]]; then
            LIST=",$LIST,"
            BR="${{ github.ref_name }}"
            if echo "$LIST" | grep -q ",${BR},"; then
              echo "auto_build=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Show Auto Build Status
        run: echo "Auto Build Status: ${{ steps.auto_build_enabled.outputs.auto_build }}"

  validate:
    name: Validate
    needs: auto_build_check
    if: ${{ needs.auto_build_check.outputs.AUTO_BUILD_ENABLED == 'true' || github.event_name == 'workflow_dispatch' }}
    uses: ./.github/workflows/validate_secrets.yml
    secrets: inherit

  check_latest_from_upstream:
    name: Check upstream
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      NEW_COMMITS: ${{ steps.export.outputs.NEW_COMMITS }}
    steps:
      - name: Checkout target repo
        if: ${{ vars.SCHEDULED_SYNC == 'true' }}
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          ref: ${{ env.TARGET_BRANCH }}

      - name: Sync upstream changes
        id: sync
        if: ${{ vars.SCHEDULED_SYNC == 'true' && github.repository_owner != 'Artificial-Pancreas' }}
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          target_sync_branch: ${{ env.TARGET_BRANCH }}
          shallow_since: 6 months ago
          target_repo_token: ${{ secrets.GH_PAT }}
          upstream_sync_branch: ${{ env.UPSTREAM_BRANCH }}
          upstream_sync_repo: ${{ env.UPSTREAM_REPO }}

      - name: Export NEW_COMMITS output
        id: export
        shell: bash
        run: |
          if [[ "${{ vars.SCHEDULED_SYNC }}" == "true" && "${{ steps.sync.outputs.has_new_commits }}" == "true" ]]; then
            echo "NEW_COMMITS=true" >> "$GITHUB_OUTPUT"
          else
            echo "NEW_COMMITS=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build
    needs: [validate, check_latest_from_upstream]
    runs-on: macos-15
    permissions:
      contents: write
    steps:
      - name: Set optional variables for Fastlane
        shell: bash
        run: |
          if [[ -n "${{ vars.APP_IDENTIFIER }}" ]]; then
            echo "APP_IDENTIFIER=${{ vars.APP_IDENTIFIER }}" >> "$GITHUB_ENV"
          fi
          if [[ -n "${{ vars.BUILD_GROUP }}" ]]; then
            echo "BUILD_GROUP=${{ vars.BUILD_GROUP }}" >> "$GITHUB_ENV"
          fi

      - name: Select Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_16.3.app/Contents/Developer

      - name: Checkout repo (build)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          submodules: recursive
          ref: ${{ env.TARGET_BRANCH }}

      - name: Patch Match Tables
        run: find /usr/local/lib/ruby/gems -name table_printer.rb | xargs sed -i "" "/puts(Terminal::Table.new(params))/d"

      - name: Install project dependencies
        run: bundle install

      - name: Decode provisioning profile (primary App Store profile)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${CERT_PROFILE_BASE64}" ]]; then
            echo "CERT_PROFILE_BASE64 is empty. Skipping decode step."
            exit 0
          fi
          echo "${CERT_PROFILE_BASE64}" | base64 -d > FreeAPS_Appstore.mobileprovision
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp FreeAPS_Appstore.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/"

      - name: Sync clock
        run: sudo sntp -sS time.windows.com

      - name: Fastlane Build & Archive
        run: bundle exec fastlane build_iAPS
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      - name: Fastlane upload to TestFlight
        run: bundle exec fastlane release
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            artifacts
            buildlog
