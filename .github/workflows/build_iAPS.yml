name: Build iAPS
run-name: Build iAPS (${{ github.ref_name }})

on:
  workflow_dispatch:    # manual launcher in Actions
  push:                 # optionalâ€”remove this whole push: block if you don't want auto-builds
    branches:
      - main
      - master
      - alive

env:
  UPSTREAM_REPO: Artificial-Pancreas/iAPS
  UPSTREAM_BRANCH: ${{ github.ref_name }}
  TARGET_BRANCH: ${{ github.ref_name }}
  ALIVE_BRANCH: alive
  TEAMID: ${{ secrets.TEAMID }}
  FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
  FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
  FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  GH_PAT: ${{ secrets.GH_PAT }}
  CERT_PROFILE_BASE64: ${{ secrets.CERT_PROFILE_BASE64 }}

jobs:
  auto_build_check:
    name: Check Auto Build Status
    runs-on: ubuntu-latest
    outputs:
      AUTO_BUILD_ENABLED: ${{ steps.auto-build-enabled.outputs.auto_build }}
    steps:
      - name: Is Auto Build Branch
        id: auto-build-enabled
        run: |
          echo "auto_build=false" >> $GITHUB_OUTPUT
          if [ -n "${{ vars.AUTO_BUILD_BRANCHES }}" ]; then
            if echo ",${{ vars.AUTO_BUILD_BRANCHES }}," | grep -q ",${{ github.ref_name }},"; then
              echo "auto_build=true" >> $GITHUB_OUTPUT
            fi
          fi
      - name: Show Auto Build Status
        run: echo "Auto Build Status: ${{ steps.auto-build-enabled.outputs.auto_build }}"

  validate:
    name: Validate
    needs: auto_build_check
    if: needs.auto_build_check.outputs.AUTO_BUILD_ENABLED == 'true' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/validate_secrets.yml
    secrets: inherit

  check_latest_from_upstream:
    name: Check upstream
    needs: [validate]
    runs-on: ubuntu-latest
    outputs:
      NEW_COMMITS: ${{ steps.sync.outputs.has_new_commits }}
    steps:
      - name: Checkout target repo
        if: needs.validate.outputs.HAS_WORKFLOW_PERMISSION == 'true' && (vars.SCHEDULED_BUILD != 'false' || vars.SCHEDULED_SYNC != 'false')
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          ref: alive

  build:
    name: Build
    needs: [validate, check_latest_from_upstream]
    runs-on: macos-14
    permissions:
      contents: write
    steps:
      - name: Set special variables
        run: |
          if [ -n "${{ vars.APP_IDENTIFIER }}" ]; then
            echo "APP_IDENTIFIER=${{ vars.APP_IDENTIFIER }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ vars.BUILD_GROUP }}" ]; then
            echo "BUILD_GROUP=${{ vars.BUILD_GROUP }}" >> $GITHUB_ENV
          fi

      # Choose Xcode reliably
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.3"

      - name: Checkout Repo for syncing
        if: vars.SCHEDULED_SYNC == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          ref: ${{ env.TARGET_BRANCH }}

      - name: Sync upstream changes
        if: vars.SCHEDULED_SYNC == 'true' && github.repository_owner != 'Artificial-Pancreas'
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          target_sync_branch: ${{ env.TARGET_BRANCH }}
          shallow_since: 6 months ago
          target_repo_token: ${{ secrets.GH_PAT }}
          upstream_sync_branch: ${{ env.UPSTREAM_BRANCH }}
          upstream_sync_repo: ${{ env.UPSTREAM_REPO }}

      - name: New commits found
        if: vars.SCHEDULED_SYNC == 'true' && steps.sync.outputs.has_new_commits == 'true'
        run: echo "New commits were found to sync."

      - name: No new commits
        if: vars.SCHEDULED_SYNC == 'true' && steps.sync.outputs.has_new_commits == 'false'
        run: echo "There were no new commits."

      - name: Show value of 'has_new_commits'
        if: vars.SCHEDULED_SYNC == 'true'
        run: echo "${{ steps.sync.outputs.has_new_commits }}"

      - name: Checkout Repo for building
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          submodules: recursive
          ref: ${{ env.TARGET_BRANCH }}

      - name: Patch Match Tables
        run: find /usr/local/lib/ruby/gems -name table_printer.rb | xargs sed -i "" "/puts(Terminal::Table.new(params))/d"

      - name: Install project dependencies
        run: bundle install

      - name: Decode provisioning profile
        run: |
          echo "${{ secrets.CERT_PROFILE_BASE64 }}" | base64 -D > FreeAPS_Appstore_2025.mobileprovision
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp FreeAPS_Appstore_2025.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/"

      - name: Sync clock
        run: sudo sntp -sS time.windows.com

      - name: Fastlane Build & Archive
        run: bundle exec fastlane build_iAPS
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      - name: Fastlane upload to TestFlight
        run: bundle exec fastlane release
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            artifacts
            buildlog
